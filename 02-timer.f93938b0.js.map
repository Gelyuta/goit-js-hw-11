{"version":3,"sources":["js/02-timer.js"],"names":["refs","btnStart","document","querySelector","inputEl","daysEl","hoursEl","minutesEl","secondsEl","pad","value","String","padStart","convertMs","ms","days","Math","floor","hour","hours","minute","minutes","second","seconds","onTimerData","textContent","classList","add","userTime","setAttribute","timer","intervalId","isActive","start","Date","now","setInterval","currentTime","deltaTime","stop","clearInterval","addEventListener","parse","Swal","fire","title","text","icon","confirmButtonText","removeAttribute"],"mappings":";AAGA,MAAMA,EAAO,CACbC,SAAWC,SAASC,cAAc,sBAClCC,QAAUF,SAASC,cAAc,uBACjCE,OAASH,SAASC,cAAc,eAChCG,QAAUJ,SAASC,cAAc,gBACjCI,UAAYL,SAASC,cAAc,kBACnCK,UAAYN,SAASC,cAAc,mBAwEnC,SAASM,EAAIC,GACNC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAMjC,SAASC,EAAUC,GAgBR,MAAA,CAAEC,KARIN,EAAIO,KAAKC,MAAMH,EAHhBI,QAWGC,MANDV,EAAIO,KAAKC,MAAOH,EALlBI,MADCE,OAYSC,QAJNZ,EAAIO,KAAKC,MAAQH,EAPrBI,MADCE,KADEE,MAagBC,QAFfd,EAAIO,KAAKC,MAASH,EATtBI,MADCE,KADEE,IADA,OAyBnB,SAASE,GAAY,KAAET,EAAF,MAAQI,EAAR,QAAeE,EAAf,QAAwBE,IACzCvB,EAAKK,OAAOoB,eAAiBV,IAC7Bf,EAAKM,QAAQmB,eAAiBN,IAC9BnB,EAAKO,UAAUkB,eAAiBJ,IAChCrB,EAAKQ,UAAUiB,eAAiBF,IAzGpCvB,EAAKI,QAAQsB,UAAUC,IAAI,gBAC3B3B,EAAKC,SAASyB,UAAUC,IAAI,iBAE5BC,SAAW,KACX5B,EAAKC,SAAS4B,aAAa,YAAY,GAKtCC,MAAQ,CAELC,WAAY,KACZC,UAAU,EAGVC,QACO,GAAA,KAAKD,SAEJ,OAGcE,KAAKC,MAElBH,KAAAA,UAAW,EAEXD,KAAAA,WAAaK,YAAY,KACpBC,MAAAA,EAAcH,KAAKC,MAEnBG,EAAaV,SAAWS,EADH,OAErB,KAAEtB,EAAF,MAAQI,EAAR,QAAeE,EAAf,QAAwBE,GAAYV,EAAUyB,GAEpDd,EAAY,CAAET,KAAAA,EAAMI,MAAAA,EAAOE,QAAAA,EAASE,QAAAA,KAGrC,MAEPgB,OACIC,cAAc,KAAKT,YACdC,KAAAA,UAAW,IAKxBhC,EAAKC,SAASwC,iBAAiB,QAAS,KACtCX,MAAMG,UAIJjC,EAAKI,QAAQqC,iBAAiB,SAAU,KACtCb,SAAWM,KAAKQ,MAAM,IAAIR,KAAKlC,EAAKI,QAAQM,QAC3CkB,UAAYM,KAAKC,MACfQ,KAAKC,KAAK,CACXC,MAAO,SACPC,KAAM,qCACNC,KAAM,QACNC,kBAAmB,OAMnBhD,EAAKC,SAASgD,gBAAgB","file":"02-timer.f93938b0.js","sourceRoot":"../src","sourcesContent":["\n// Получаю доступ к элементам DOM-дерева\n\nconst refs = {\nbtnStart : document.querySelector('button[data-start]'),\ninputEl : document.querySelector('input#date-selector'),\ndaysEl : document.querySelector('[data-days]'),\nhoursEl : document.querySelector('[data-hours]'),\nminutesEl : document.querySelector('[data-minutes]'),\nsecondsEl : document.querySelector('[data-seconds]'),\n}\n\n// Вешаю классы на форму и кнопку\n\nrefs.inputEl.classList.add('input__style'),\nrefs.btnStart.classList.add('button__style'),\n\nuserTime = null;\nrefs.btnStart.setAttribute('disabled', true);\n\n\n// Таймер\n\n timer = {\n\n    intervalId: null,\n    isActive: false,\n    \n\n    start() {\n        if(this.isActive){\n    \n            return;\n        }\n        \n        const startTime = Date.now();\n     \n        this.isActive = true;\n        \n        this.intervalId = setInterval(() =>{\n            const currentTime = Date.now();\n            const timeZoneDifference = 10800000;//10800000 - разница во времени из-за часового пояса\n            const deltaTime =  userTime - currentTime - timeZoneDifference;\n            const { days, hours, minutes, seconds } = convertMs(deltaTime);\n\n            onTimerData({ days, hours, minutes, seconds })\n\n            // console.log(`${days}:${hours}:${minutes}:${seconds}`);\n        }, 1000);\n    },\n    stop(){\n        clearInterval(this.intervalId);\n        this.isActive = false;\n    },\n};\n\n// Старт таймера\nrefs.btnStart.addEventListener('click', ()=> {\n  timer.start();\n});\n\n// Событие инпута\n    refs.inputEl.addEventListener('change', ()=>{\n      userTime = Date.parse(new Date(refs.inputEl.value));\n    if(userTime <= Date.now()){\n         Swal.fire({\n        title: 'Error!',\n        text: 'Please choose a date in the future',\n        icon: 'error',\n        confirmButtonText: 'Ok'\n    })\n                return;\n    }\n        // console.log('клик')\n  \n        refs.btnStart.removeAttribute('disabled');\n     });\n\n// **********************************************************************************************\n// Функция, которая добавляет \"0\" перед числом\n\nfunction pad(value){\nreturn String(value).padStart(2, '0');\n}\n\n// ************************************************************************************************\n// Функция, которая конвертирует дату и время\n\nfunction convertMs(ms) {\n    // Number of milliseconds per unit of time\n    const second = 1000;\n    const minute = second * 60;\n    const hour = minute * 60;\n    const day = hour * 24;\n  \n    // Remaining days\n    const days = pad(Math.floor(ms / day));\n    // Remaining hours\n    const hours = pad(Math.floor((ms % day) / hour));\n    // Remaining minutes\n    const minutes = pad(Math.floor(((ms % day) % hour) / minute));\n    // Remaining seconds\n    const seconds = pad(Math.floor((((ms % day) % hour) % minute) / second));\n  \n    return { days, hours, minutes, seconds };\n  }\n  \n//   console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n//   console.log(convertMs(140000)); //{days: 0, hours: 0, minutes: 2, seconds: 20}\n//   console.log(convertMs(24140000)); // {days: 0, hours: 6, minutes: 42, seconds: 20}\n\n\n// ************************************************************************************************\n// Функция, которая добавляет данные таймера в интерфейс\n\nfunction onTimerData({ days, hours, minutes, seconds }) {\n    refs.daysEl.textContent = `${days}`;\n    refs.hoursEl.textContent = `${hours}`;\n    refs.minutesEl.textContent = `${minutes}`;\n    refs.secondsEl.textContent = `${seconds}`;\n};\n\n// ***************************************************************************\n// Класс \"Таймер\"\n\n// class Timer {\n//     constructor({ onTick }) {\n//       this.intervalId = null;\n//       this.isActive = false;\n//       this.onTick = onTick;\n  \n//       this.init();\n//     }\n  \n//     init() {\n//       const time = this.convertMs(0);\n//       this.onTick(time);\n//     }\n  \n//     start() {\n//       if (this.isActive) {\n//         return;\n//       }\n  \n//       const startTime = Date.now();\n//       this.isActive = true;\n  \n//       this.intervalId = setInterval(() => {\n//         const currentTime = Date.now();\n//          const deltaTime =  userTime - currentTime- 10800000;//10800000 - разница во времени из-за часового пояса\n//         // const time = this.convertMs(deltaTime);\n  \n//         // this.onTick(time);\n//       }, 1000);\n//     }\n  \n//     stop() {\n//       clearInterval(this.intervalId);\n//       this.isActive = false;\n//       // const time = this.convertMs(0);\n//       // this.onTick(time);\n//     }\n\n//     convertMs(ms) {\n//        // Number of milliseconds per unit of time\n//        const second = 1000;\n//        const minute = second * 60;\n//        const hour = minute * 60;\n//        const day = hour * 24;\n          \n//        // Remaining days\n//        const days = this.pad(Math.floor(ms / day));\n//        // Remaining hours\n//        const hours = this.pad(Math.floor((ms % day) / hour));\n//        // Remaining minutes\n//        const minutes = this.pad(Math.floor(((ms % day) % hour) / minute));\n//        // Remaining seconds\n//        const seconds = this.pad(Math.floor((((ms % day) % hour) % minute) / second));\n          \n//       return { days, hours, minutes, seconds };\n//     }\n\n//     pad(value) {\n//       return String(value).padStart(2, '0');\n//     }\n//   }\n  \n//   const timer = new Timer({\n//     onTick: onTimerData,\n//   });\n  \n//   refs.btnStart.addEventListener('click', timer.start.bind(timer));\n  \n\n//   function onTimerData({ days, hours, minutes, seconds }) {\n//     refs.daysEl.textContent = `${days}`;\n//     refs.hoursEl.textContent = `${hours}`;\n//     refs.minutesEl.textContent = `${minutes}`;\n//     refs.secondsEl.textContent = `${seconds}`;\n// };\n\n// refs.inputEl.addEventListener('change', ()=>{\n//   userTime = Date.parse(new Date(refs.inputEl.value));\n// if(userTime <= Date.now()){\n//     Swal.fire({\n//         icon: 'error',\n//         title: 'Oops...',\n//         text: 'Something went wrong!',\n//         footer: 'Please select a date later than the current one',\n//             });\n//             return;\n// }\n//     console.log('клик')\n\n//     refs.btnStart.removeAttribute('disabled');\n//  });\n  \n          "]}