{"version":3,"sources":["js/03-promisify.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","onSuccess","onError","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAEA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IACfC,WAAW,KACPD,EAAQF,IACTA,KAIHI,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAIpBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAGxD,OAAA,IAAIhB,QAAQC,GAAWA,EAAQa,KAQxCH,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAG5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkB,CAACC,EAAaC,EAAWC,KACzC7B,MAAAA,EAAQoB,EAA0B,IAAK,KACtC,OAAA,IAAIlB,QAAQ,CAACC,EAAS2B,KAC7B1B,WAAW,KACUmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAAE4B,GAAIJ,EAAYI,GAAIzB,KAAMN,IAEpC8B,EAAOH,EAAYI,KAEpB/B,MAICgC,EAAa,EAAGD,GAAAA,EAAIzB,KAAAA,MACxBC,QAAQC,mBAAmBuB,kBAAmBzB,QAG1C2B,EAAWF,IACfxB,QAAQ2B,qCAAqCH,+BAU/CL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH,GAChEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAM1B,KAAKuB,GAAYI,MAAMH,GAC/DP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAO1B,KAAKuB,GAAYI,MAAMH","file":"03-promisify.1800893a.js","sourceRoot":"../src","sourcesContent":["// // ======================= Subtask 1 =======================\n\nconst delay = ms => {\n  return new Promise(resolve => {\n      setTimeout(() => {\n          resolve(ms)\n      }, ms)\n  })\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n// // ======================= Subtask 2 =======================\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: false },\n];\n\n\nconst toggleUserState = (allUsers, username) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === username ? { ...user, active: !user.active } : user,\n  );\n\n  return new Promise(resolve => resolve(updatedUsers));\n};\n\n// Currently the function works like this\n// toggleUserState(users, 'Mango', console.table);\n// toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n// // ======================= Subtask 3 =======================\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) =>{\n  setTimeout(() => {\n    const canProcess = Math.random() > 0.3;\n\n    if (canProcess) {\n      resolve({ id: transaction.id, time: delay });\n    } else {\n      reject(transaction.id);\n    }\n  }, delay);\n});\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n\n"]}